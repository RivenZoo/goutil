package dencrypt

import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/md5"
	"encoding/binary"
	"time"
)

var (
	keyPrefix = []byte("=D!UG3StDVIE$6Dy")
)

// return key by random number
func GenRandKey(randomNum uint32) []byte {
	h := md5.New()
	h.Write(keyPrefix)
	binary.Write(h, binary.LittleEndian, randomNum)
	return h.Sum(nil)
}

// return random key which generated by md5sum UnixNano
func GenTimeKey() []byte {
	t := time.Now().UnixNano()
	h := md5.New()
	binary.Write(h, binary.LittleEndian, t)
	return h.Sum(nil)
}

// encrypt in cfb mode, store result in buf and return nil if success
func CFBEncrypt(aesKey, iv, buf []byte) error {
	block, err := aes.NewCipher(aesKey)
	if err != nil {
		return err
	}

	stream := cipher.NewCFBEncrypter(block, iv)
	stream.XORKeyStream(buf, buf)
	return nil
}

// decrypt in cfb mode, store result in buf and return nil if success
func CFBDecrypt(aesKey, iv, buf []byte) error {
	block, err := aes.NewCipher(aesKey)
	if err != nil {
		return err
	}

	stream := cipher.NewCFBDecrypter(block, iv)
	stream.XORKeyStream(buf, buf)
	return nil
}
