package dencrypt

import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/md5"
	"encoding/binary"
	"time"
	"bytes"
)

var (
	keyPrefix = []byte("=D!UG3StDVIE$6Dy")
)

// return key by random number
func GenRandKey(randomNum uint32) []byte {
	h := md5.New()
	h.Write(keyPrefix)
	binary.Write(h, binary.LittleEndian, randomNum)
	return h.Sum(nil)
}

// return random key which generated by md5sum UnixNano
func GenTimeKey() []byte {
	t := time.Now().UnixNano()
	h := md5.New()
	binary.Write(h, binary.LittleEndian, t)
	return h.Sum(nil)
}

// encrypt in cfb mode, store result in buf and return nil if success
func CFBEncrypt(aesKey, iv, buf []byte) error {
	block, err := aes.NewCipher(aesKey)
	if err != nil {
		return err
	}

	stream := cipher.NewCFBEncrypter(block, iv)
	stream.XORKeyStream(buf, buf)
	return nil
}

// decrypt in cfb mode, store result in buf and return nil if success
func CFBDecrypt(aesKey, iv, buf []byte) error {
	block, err := aes.NewCipher(aesKey)
	if err != nil {
		return err
	}

	stream := cipher.NewCFBDecrypter(block, iv)
	stream.XORKeyStream(buf, buf)
	return nil
}

func PKCS5Padding(ciphertext []byte, blockSize int) []byte {
	padding := blockSize - len(ciphertext)%blockSize
	padtext := bytes.Repeat([]byte{byte(padding)}, padding)
	return append(ciphertext, padtext...)
}

func PKCS5UnPadding(origData []byte) []byte {
	length := len(origData)
	unpadding := int(origData[length-1])
	return origData[:(length - unpadding)]
}

func ECBEncrypt(aesKey, buf []byte) ([]byte, error) {
	block, err := aes.NewCipher([]byte(aesKey))
	if err != nil {
		return nil, err
	}
	bs := block.BlockSize()
	plaintext := PKCS5Padding(buf, bs)
	ciphertext := make([]byte, len(plaintext))
	buf = ciphertext
	for len(plaintext) > 0 {
		block.Encrypt(ciphertext, plaintext)
		plaintext = plaintext[bs:]
		ciphertext = ciphertext[bs:]
	}
	return buf, nil
}

func ECBDecrypt(aesKey, data []byte) ([]byte, error) {
	block, err := aes.NewCipher([]byte(aesKey))
	if err != nil {
		return nil, err
	}
	bs := block.BlockSize()
	plaintext := make([]byte, len(data))
	buf := plaintext
	for len(data) > 0 {
		block.Decrypt(plaintext, data)
		plaintext = plaintext[bs:]
		data = data[bs:]
	}
	buf = PKCS5UnPadding(buf)
	return buf, nil
}